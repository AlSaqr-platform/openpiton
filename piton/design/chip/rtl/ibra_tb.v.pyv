// Modified by Princeton University on June 9th, 2015
// ========== Copyright Header Begin ==========================================
//
// OpenSPARC T1 Processor File: cmp_top.v
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
//
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
//
// The above named program is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
//
// ========== Copyright Header End ============================================
////////////////////////////////////////////////////////

`ifndef USE_TEST_TOP // don't compile if user wants to use deprecated TOPs
`include "sys.h"
`include "iop.h"
`include "cross_module.tmp.h"
`include "ifu.tmp.h"
`include "define.tmp.h"
`include "piton_system.vh"

<%
    from pyhplib import *
%>

`ifdef PITON_DPI
import "DPI-C" function longint read_64b_call (input longint addr);
import "DPI-C" function void write_64b_call (input longint addr, input longint data);
import "DPI-C" function int drive_iob ();
import "DPI-C" function int get_cpx_word (int index);
import "DPI-C" function void report_pc (longint thread_pc);
import "DPI-C" function void init_jbus_model_call(string str, int oram);
`endif

`timescale 1ps/1ps
module ibra_tb (
    input wire core_ref_clk,
    input wire sys_rst_n,
    // Debug
    input                                       ndmreset_i,    // non-debug module reset
    input wire [63:0]                           alsaqr_bootaddr,
    input   [`NUM_TILES-1:0]                    debug_req_i,   // async debug request
    output  [`NUM_TILES-1:0]                    unavailable_o, // communicate whether the hart is unavailable (e.g.: power down)
    // CLINT
    input   [`NUM_TILES-1:0]                    timer_irq_i,   // Timer interrupts
    input   [`NUM_TILES-1:0]                    ipi_i,         // software interrupt (a.k.a inter-process-interrupt)
    // PLIC
    input   [`NUM_TILES*2-1:0]                  irq_i          // level sensitive IR lines, mip & sip (async)
);



////////////////////////////////////////////////////////
// SYNTHESIZABLE SYSTEM
// INCLUDES CHIP 
///////////////////////////////////////////////////////

wire [63:0]                        alsaqr_bootaddr_fixed;
assign alsaqr_bootaddr_fixed = 64'hFFF1010000;

ibra test(

   // IO cell configs
.slew(1'b1),
.impsel1(1'b1),
.impsel2(1'b1),

   // Input clocks
.core_ref_clk(core_ref_clk),


   // Resets
   // reset is assumed to be asynchronous
.rst_n(sys_rst_n),

.pll_rst_n(sys_rst_n),

   // Chip-level clock enable
.clk_en(1'b1),

   // PLL settings
.pll_lock(pll_lock),
.pll_bypass(1'b1),
.pll_rangea(5'b00001),

   // Clock mux select (bypass PLL or not)
   // Double redundancy with pll_bypass
.clk_mux_sel(2'b00),

   // Async FIFOs enable
.async_mux(1'b0),

    // Debug
.ndmreset_i(ndmreset_i),    // non-debug module reset
.debug_req_i(debug_req_i),   // async debug request
.unavailable_o(unavailable_o), // communicate whether the hart is unavailable (e.g.: power down)

   // CLINT
.timer_irq_i(timer_irq_i),   // Timer interrupts
.ipi_i(ipi_i),         // software interrupt (a.k.a inter-process-interrupt)

   // PLIC
.irq_i(irq_i),          // level sensitive IR lines, mip & sip (async)
.alsaqr_bootaddr(alsaqr_bootaddr_fixed)
);



endmodule // cmp_top

`endif
